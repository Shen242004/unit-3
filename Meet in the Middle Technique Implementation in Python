def subset_sum(arr, target):
    n = len(arr)
    half = n // 2

    # Generate all possible subsets of the first half of the array
    first_half = []
    for i in range(1 << half):
        subset_sum = sum(arr[j] for j in range(half) if (i & (1 << j)) > 0)
        first_half.append(subset_sum)

    # Generate all possible subsets of the second half of the array
    second_half = []
    for i in range(1 << (n - half)):
        subset_sum = sum(arr[j + half] for j in range(n - half) if (i & (1 << j)) > 0)
        second_half.append(subset_sum)

    second_half.sort()

    # Check if there exists a subset sum in the first half that complements a sum in the second half to the target
    for sum1 in first_half:
        target_diff = target - sum1
        low = 0
        high = len(second_half) - 1
        while low <= high:
            mid = (low + high) // 2
            if second_half[mid] == target_diff:
                return True
            elif second_half[mid] < target_diff:
                low = mid + 1
            else:
                high = mid - 1

    return False

# Test cases
arr1 = [1, 3, 9, 2, 7, 12]
target1 = 15
print(subset_sum(arr1, target1))  # Output: True

arr2 = [3, 34, 4, 12, 5, 2]
target2 = 15
print(subset_sum(arr2, target2))  # Output: False
